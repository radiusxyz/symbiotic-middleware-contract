# Vault Delegator check (number 1)
# cast call $VAULT_CONTRACT_ADDRESS --rpc-url $RPC_URL "delegator()(address)"
# cast call 0x141f701f974d0252d4327E2FB5Ed000F559251B8 --rpc-url $RPC_URL "delegator()(address)"

# total Staking check (number 2)
# cast call 0x141f701f974d0252d4327E2FB5Ed000F559251B8 --rpc-url $RPC_URL "totalStake()(uint256)"
# cast call $VAULT_CONTRACT_ADDRESS --rpc-url $RPC_URL "activeStake()(uint256)"
####################
cast send $TOKEN_CONTRACT_ADDRESS --rpc-url $RPC_URL --private-key $TOKEN_CONTRACT_OWNER_PRIVATE_KEY \
"approve(address spender, uint256 value)(bool)" $COLLATERAL_CONTRACT_ADDRESS 10000 

cast send $COLLATERAL_CONTRACT_ADDRESS --rpc-url $RPC_URL --private-key $COLLATERAL_OWNER_PRIVATE_KEY \
"deposit(address recipient, uint256 amount)(uint256)" $TOKEN_CONTRACT_OWNER_ADDRESS 10000 

cast send $COLLATERAL_CONTRACT_ADDRESS --rpc-url $RPC_URL --private-key $TOKEN_CONTRACT_OWNER_PRIVATE_KEY \
"approve(address spender, uint256 value)(bool)" $VAULT_CONTRACT_ADDRESS 10000

cast send $VAULT_CONTRACT_ADDRESS --rpc-url $RPC_URL --private-key $TOKEN_CONTRACT_OWNER_PRIVATE_KEY \
"deposit(address onBehalfOf, uint256 amount)(uint256 depositedAmount, uint256 mintedShares)" $TOKEN_CONTRACT_OWNER_ADDRESS 10000
#####################

# Operator register check (number 3)
# cast call $OPERATOR_REGISTRY_CONTRACT_ADDRESS --rpc-url $RPC_URL \
# "isEntity(address who)(bool)" $OPERATOR_ADDRESS
#####################
cast send $OPERATOR_REGISTRY_CONTRACT_ADDRESS --rpc-url $RPC_URL --private-key $OPERATOR_PRIVATE_KEY \
"registerOperator()"
#####################

# Network register check (number 4)
# cast call $NETWORK_REGISTRY_CONTRACT_ADDRESS --rpc-url $RPC_URL \
# "isEntity(address who)(bool)" $NETWORK_ADDRESS
#####################
cast send $NETWORK_REGISTRY_CONTRACT_ADDRESS --rpc-url $RPC_URL --private-key $NETWORK_PRIVATE_KEY \
"registerNetwork()"
#####################

# Middleware가 등록되었는지 check(5번)
# cast call $NETWORK_MIDDLEWARE_SERVICE_CONTRACT_ADDRESS --rpc-url $RPC_URL \
# "middleware(address networkAddress)(address middlewareAddress)" $NETWORK_ADDRESS
#####################
cast send $NETWORK_MIDDLEWARE_SERVICE_CONTRACT_ADDRESS --rpc-url $RPC_URL --private-key $NETWORK_PRIVATE_KEY \
"setMiddleware(address middlewareAddress)" $VALIDATION_SERVICE_MANAGER_CONTRACT_ADDRESS
#####################

# Operator가 network에 Optin 되었는지 check (6번)
# cast call $OPERATOR_NETWORK_OPT_IN_SERVICE_CONTRACT_ADDRESS --rpc-url $RPC_URL \
# "isOptedIn(address who, address where)(bool)" $OPERATOR_ADDRESS $NETWORK_ADDRESS
#####################
cast send $OPERATOR_NETWORK_OPT_IN_SERVICE_CONTRACT_ADDRESS --rpc-url $RPC_URL --private-key $OPERATOR_PRIVATE_KEY \
"optIn(address network)" $NETWORK_ADDRESS
#####################

# Operator가 vault에 Optin 되었는지 check (7번)
# cast call $OPERATOR_VAULT_OPT_IN_SERVICE_CONTRACT_ADDRESS --rpc-url $RPC_URL \
# "isOptedIn(address who, address where)(bool)" $OPERATOR_ADDRESS $VAULT_CONTRACT_ADDRESS
#####################
cast send $OPERATOR_VAULT_OPT_IN_SERVICE_CONTRACT_ADDRESS --rpc-url $RPC_URL --private-key $OPERATOR_PRIVATE_KEY \
"optIn(address vault)" $VAULT_CONTRACT_ADDRESS
#####################

# Vault가 register 되었는지 check (8번)
# cast call $VALIDATION_SERVICE_MANAGER_CONTRACT_ADDRESS --rpc-url $RPC_URL \
# "vaultLen()(uint256)" 
# cast call $VALIDATION_SERVICE_MANAGER_CONTRACT_ADDRESS --rpc-url $RPC_URL \
# "getCurrentVaults()(address[])" 
# cast call $VALIDATION_SERVICE_MANAGER_CONTRACT_ADDRESS --rpc-url $RPC_URL \
# "isActiveVault(address vault)(bool)" $VAULT_CONTRACT_ADDRESS
#####################
cast send $VALIDATION_SERVICE_MANAGER_CONTRACT_ADDRESS --rpc-url $RPC_URL --private-key $NETWORK_PRIVATE_KEY \
"registerToken(address tokenAddress)" $TOKEN_CONTRACT_ADDRESS

cast send $VALIDATION_SERVICE_MANAGER_CONTRACT_ADDRESS --rpc-url $RPC_URL --private-key $NETWORK_PRIVATE_KEY \
"registerVault(address vaultAddress)" $VAULT_CONTRACT_ADDRESS
#####################

# Operator가 register 되었는지 check (9번)
# cast call $VALIDATION_SERVICE_MANAGER_CONTRACT_ADDRESS --rpc-url $RPC_URL \
# "getCurrentOperatorInfos()((address, address, (address, uint256)[], uint256)[])"
#####################
cast send $VALIDATION_SERVICE_MANAGER_CONTRACT_ADDRESS --rpc-url $RPC_URL --private-key $NETWORK_PRIVATE_KEY \
"registerOperator(address operatorAddress, address operatingAddress)" $OPERATOR_ADDRESS $OPERATING_ADDRESS
#####################

# MaxNetworkLimit check (10번)
# cast call $DELEGATOR_CONTRACT_ADDRESS --rpc-url $RPC_URL \
# "maxNetworkLimit(bytes32 subnetwork)(uint256 maxNetworkLimit)" $SUBNETWORK
#####################
cast send $DELEGATOR_CONTRACT_ADDRESS --rpc-url $RPC_URL --private-key $NETWORK_PRIVATE_KEY \
"setMaxNetworkLimit(uint96 identifier, uint256 amount)" 0 10000
#####################

# networkLimit check (11번)
# cast call $DELEGATOR_CONTRACT_ADDRESS --rpc-url $RPC_URL \
# "networkLimit(bytes32 subnetwork)(uint256 networkLimit)" $SUBNETWORK
#####################
cast send $DELEGATOR_CONTRACT_ADDRESS --rpc-url $RPC_URL --private-key $VAULT_OWNER_PRIVATE_KEY \
"setNetworkLimit(bytes32 subnetwork, uint256 amount)" $SUBNETWORK 10000
#####################

# (12번)
# cast call $DELEGATOR_CONTRACT_ADDRESS --rpc-url $RPC_URL \
# "operatorNetworkShares(bytes32 subnetwork, address operator)(uint256)" $SUBNETWORK $OPERATOR_ADDRESS
# cast call $DELEGATOR_CONTRACT_ADDRESS --rpc-url $RPC_URL \
# "totalOperatorNetworkShares(bytes32 subnetwork)(uint256)" $SUBNETWORK
# cast call $DELEGATOR_CONTRACT_ADDRESS --rpc-url $RPC_URL \
# "stake(bytes32 subnetwork, address operator)(uint256)" $SUBNETWORK $OPERATOR_ADDRESS
#####################
cast send $DELEGATOR_CONTRACT_ADDRESS --rpc-url $RPC_URL --private-key $VAULT_OWNER_PRIVATE_KEY \
"setOperatorNetworkShares(bytes32 subnetwork, address operator, uint256 shares)" $SUBNETWORK $OPERATOR_ADDRESS 10000
#####################
##############################################################s######################
# cast call $VALIDATION_SERVICE_MANAGER_CONTRACT_ADDRESS --rpc-url $RPC_URL \
# "getCurrentTotalStake()(uint256)"
# cast call $VALIDATION_SERVICE_MANAGER_CONTRACT_ADDRESS --rpc-url $RPC_URL \
# "getCurrentTokenTotalStake(address token)(uint256)" $TOKEN_CONTRACT_ADDRESS
# cast call $VALIDATION_SERVICE_MANAGER_CONTRACT_ADDRESS --rpc-url $RPC_URL \
# "getCurrentOperatorStake(address operator)(uint256)" $OPERATOR_ADDRESS
# cast call $VALIDATION_SERVICE_MANAGER_CONTRACT_ADDRESS --rpc-url $RPC_URL \
# "getCurrentOperatorEachTokenStake(address operator)((address, uint256)[])" $OPERATOR_ADDRESS
# cast call $VALIDATION_SERVICE_MANAGER_CONTRACT_ADDRESS --rpc-url $RPC_URL \
# "getCurrentOperatorTokenStake(address operator, address token)(uint256)" $OPERATOR_ADDRESS $TOKEN_CONTRACT_ADDRESS
 

# cast call $LIVENESS_CONTRACT_ADDRESS --rpc-url $RPC_URL \
# "getClustersByOwner(address owner)(string[])" $NETWORK_ADDRESS
#####################
cast send $LIVENESS_CONTRACT_ADDRESS --rpc-url $RPC_URL --private-key $NETWORK_PRIVATE_KEY \
"initializeCluster(string clusterId, uint256 maxSequencerNumber)" $CLUSTER_ID $MAX_SEQUENCER_NUMBER
#####################

# addRollup (14번)
# cast call $LIVENESS_CONTRACT_ADDRESS --rpc-url $RPC_URL \
# "getRollupInfo(string clusterId, string rollupId)((string,address,string,string,string,address[],(string,string,address)))" $CLUSTER_ID $ROLLUP_ID
#####################
cast send $LIVENESS_CONTRACT_ADDRESS --rpc-url $RPC_URL --private-key $NETWORK_PRIVATE_KEY \
"addRollup(string,(string,address,string,string,string,address,(string,string,address)))" \
"$CLUSTER_ID" "($ROLLUP_ID, $OWNER_ADDRESS, $ROLLUP_TYPE, $ENCRYPTED_TRANSACTION_TYPE, $ORDER_COMMITMENT_TYPE, $EXECUTOR_ADDRESS, ($PLATFORM, $SERVICE_PROVIDER, $VALIDATION_ADDRESS))"
#####################

##################### Register executor #####################
# cast call $LIVENESS_CONTRACT_ADDRESS --rpc-url $RPC_URL \
# "getExecutorList(string clusterId, string rollupId)(address[])" $CLUSTER_ID $ROLLUP_ID
# cast call $LIVENESS_CONTRACT_ADDRESS --rpc-url $RPC_URL \
# "isRegisteredRollupExecutor(string clusterId, string rollupId, address executorAddress)(bool)" $CLUSTER_ID $ROLLUP_ID $EXECUTOR_ADDRESS
#####################
cast send $LIVENESS_CONTRACT_ADDRESS --rpc-url $RPC_URL --private-key $NETWORK_PRIVATE_KEY \
"registerRollupExecutor(string clusterId, string rollupId, address executorAddress)" $CLUSTER_ID $ROLLUP_ID $EXECUTOR_ADDRESS
#####################
#############################################################

# registerSequencer (14번)
# cast call $LIVENESS_CONTRACT_ADDRESS --rpc-url $RPC_URL \
# "getSequencerList(string clusterId)(address[] memory)" $CLUSTER_ID
# #####################
cast send $LIVENESS_CONTRACT_ADDRESS --rpc-url $RPC_URL --private-key $OPERATING_PRIVATE_KEY \
"registerSequencer(string clusterId)" $CLUSTER_ID
#####################

 
# cast call $LIVENESS_CONTRACT_ADDRESS --rpc-url $RPC_URL \
# "getClustersByOwner(address owner)(string[])" $NETWORK_ADDRESS

cast send $LIVENESS_CONTRACT_ADDRESS --rpc-url $RPC_URL --private-key $NETWORK_PRIVATE_KEY \
"addRollup(string,(string,address,string,string,string,address,(string,string,address)))" \
"$CLUSTER_ID" "($ROLLUP_ID, $OWNER_ADDRESS, $ROLLUP_TYPE, $ENCRYPTED_TRANSACTION_TYPE, $ORDER_COMMITMENT_TYPE, $EXECUTOR_ADDRESS, ($PLATFORM, $SERVICE_PROVIDER, $VALIDATION_ADDRESS))"
# cast call $LIVENESS_CONTRACT_ADDRESS --rpc-url $RPC_URL \
# "getRollupInfo(string clusterId, string rollupId)((string,address,string,string,string,address[],(string,string,address)))" $CLUSTER_ID $ROLLUP_ID

#################
# Vault register check
# cast call $VAULT_FACTORY_CONTRACT_ADDRESS --rpc-url $RPC_URL \
# "isEntity(address who)(bool)" $VAULT_CONTRACT_ADDRESS
#####################
cast send $VAULT_CONTRACT_ADDRESS --rpc-url $RPC_URL --private-key $TOKEN_CONTRACT_OWNER_PRIVATE_KEY \
"deposit(address onBehalfOf, uint256 amount)(uint256 depositedAmount, uint256 mintedShares)" $TOKEN_CONTRACT_OWNER_ADDRESS 100
#####################
# cast call $VALIDATION_SERVICE_MANAGER_CONTRACT_ADDRESS --rpc-url $RPC_URL \
# "SLASHING_WINDOW()(uint48)"
# cast call $VAULT_CONTRACT_ADDRESS --rpc-url $RPC_URL \
# "epochDuration()(uint48)"
# cast call $VAULT_CONTRACT_ADDRESS --rpc-url $RPC_URL \
# "slasher()(address)"


# CLUSTER ID, ROLLUP ID, Reward Token Address, Reward Amount per Interval, Distribution Interval, Operator Reward Ratio, Staker Reward Ratio
cast send $REWARDS_CORE_ADDRESS --rpc-url $RPC_URL --private-key $NETWORK_PRIVATE_KEY \
"addRewardPoolConfig(string,string,address,uint256,uint256,uint256,uint256)" $CLUSTER_ID $ROLLUP_ID $TOKEN_CONTRACT_ADDRESS 10000000000000000000 10 70 30


cast send $TOKEN_CONTRACT_ADDRESS --rpc-url $RPC_URL --private-key $NETWORK_PRIVATE_KEY "approve(address,uint256)" $REWARDS_CORE_ADDRESS 50000000000000000000


cast send $REWARDS_CORE_ADDRESS --rpc-url $RPC_URL --private-key $NETWORK_PRIVATE_KEY \
"depositRewards(string,string,uint256)" $CLUSTER_ID $ROLLUP_ID 50000000000000000000



# cast send $VALIDATION_SERVICE_MANAGER_CONTRACT_ADDRESS "distributeRewards(string,string,bytes32,uint48,bytes,bytes,uint256)" $CLUSTER_ID $ROLLUP_ID 0xa6990e50b43e0c4966db704a0a6390be1c258b89afdd4ae4a02ac141771f5120 1702483200 0x0001 0x0001 100 --rpc-url $RPC_URL --private-key $NETWORK_PRIVATE_KEY


# cast call $DEFAULT_OPERATOR_REWARDS "claimed(address,address,address)(uint256)" \
#     $VALIDATION_SERVICE_MANAGER_CONTRACT_ADDRESS \
#     $TOKEN_CONTRACT_ADDRESS \
#     0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266


#     cast send $DEFAULT_OPERATOR_REWARDS "claimRewards(address,address,address,uint256,bytes32[])" \
#     0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 \
#     $VALIDATION_SERVICE_MANAGER_CONTRACT_ADDRESS \
#     $TOKEN_CONTRACT_ADDRESS \
#     700000 \
#     "[0x79c89c00dfddab9ada8c798f599d719b4f3bc75d5a7388ff3260428c0488c13e]" \
#     --rpc-url $RPC_URL \
#     --private-key $OPERATING_PRIVATE_KEY


#     cast call $DEFAULT_OPERATOR_REWARDS "claimable(address,address,uint256,bytes32[])(uint256)" 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 $VALIDATION_SERVICE_MANAGER_CONTRACT_ADDRESS $TOKEN_CONTRACT_ADDRESS 700000 "[0x79c89c00dfddab9ada8c798f599d719b4f3bc75d5a7388ff3260428c0488c13e]" 


console.log("Distributing operator rewards for vault...");
console.log("  Amount:", totalOperatorReward[i]);

_safeTokenApprove(rewardToken, vaultInfo.operatorRewards, totalOperatorReward[i]);
console.log("Approved operator rewards contract to spend:", totalOperatorReward[i]);

IDefaultOperatorRewards(vaultInfo.operatorRewards).distributeRewards(
    NETWORK,
    rewardToken,
    totalOperatorReward[i], 
    operatorMerkleRoots[i]
);
console.log("Operator rewards distributed successfully");




cast send $VALIDATION_SERVICE_MANAGER_CONTRACT_ADDRESS "createNewTask(string,string,uint256,bytes32,address[],bytes32[],uint256[],uint256[])" $CLUSTER_ID $ROLLUP_ID 12 0x287b58b93ed6c17ace087bb87f611bf21102c0602b0956736b6e523fb41c328d [] [] [] [] --rpc-url $RPC_URL --private-key $DEFAULT_OPERATOR_PRIVATE_KEY


curl http://localhost:3000/distribution/$CLUSTER_ID/$ROLLUP_ID


curl -X POST https://649a-59-10-110-198.ngrok-free.app/rewards \
    -H "Content-Type: application/json" \
    -d '{
    "jsonrpc": "2.0",
    "method": "get_rewards",
    "params": {
    "cluster_id": "'$CLUSTER_ID'",
    "rollup_id": "'$ROLLUP_ID'"
    },
    "id": 1
}'

Operator Data:
[
  [
    '0x70997970C51812dc3A010C7d01b50e0d17dc79C8',
    ''
  ],
  [ '0x15d34AAf54267DB7D7c367839AAf71A00a2C6A65', '' ]
]

Vault Staker Data:
105443634804972138n

Vault Address:
0x0400b7fcf3e4e02c5585078e3c850b532b65da37
Vault Token Address:
0x59b670e9fa9d0a427751af201d676719a970857b
Operator Data:
[
  [
    '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',
    ''
  ],
  [
    '0x90F79bf6EB2c4f870365E785982E1f101E93b906',
    ''
  ]
]

Vault Staker Data:
965066438062580368n

Vault Address:
0x07063bd7599a32bcde28df107f60dc589c27608b
Vault Token Address:
0x4ed7c70f96b99c776995fb64377f0d4ab3b0e1c1
Operator Data:
[
  [
    '0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC',
    ''
  ],
  [
    '0x9965507D1a55bcC2695C58ba16FB37d819B0A4dc',
    ''
  ]
]

172524646378054007 + 73510501500214316 + 1576725246463780537 + 675096442348906985 + 3151950278611230174 + 1350192884697813970


 curl -X GET http://localhost:3000/operator-rewards/$CLUSTER_ID/$ROLLUP_ID/0x9965507D1a55bcC2695C58ba16FB37d819B0A4dc



cast send $STETH_OPERATOR_REWARDS "claimRewards(address,address,address,uint256,bytes32[])" \
$STETH_OPERATOR_ADDRESS \
$NETWORK_ADDRESS \
$DEFAULT_TOKEN_ADDRESS \
3000000000000000000 \
"[0x9543eb0d43cff4872c9a627d355e02990db82a37882ef80abaca5a7fc41cffc9]" \
--rpc-url $RPC_URL \
--private-key $STETH_OPERATOR_PRIVATE_KEY



cast send $DEFAULT_OPERATOR_REWARDS "claimRewards(address,address,address,uint256,bytes32[])" \
$DEFAULT_OPERATOR_ADDRESS \
$NETWORK_ADDRESS \
$DEFAULT_TOKEN_ADDRESS \
1707472309472640105 \
"[0x3ba86b4bec7ad722e160376560c09bf9e25bd82fbf347516c199ab64065de7b1]" \
--rpc-url $RPC_URL \
--private-key $DEFAULT_OPERATOR_PRIVATE_KEY


cast send $DEFAULT_OPERATOR_REWARDS "claimRewards(address,address,address,uint256,bytes32[])" \
$DEFAULT_OPERATOR_ADDRESS_SECONDARY \
$NETWORK_ADDRESS \
$DEFAULT_TOKEN_ADDRESS \
731939163498098856 \
"[0xd48c0a2f3ccd42918180c14eedc7ee607f7d42e4d8cc578055bb3f61ce615b31]" \
--rpc-url $RPC_URL \
--private-key $DEFAULT_OPERATOR_PRIVATE_KEY_SECONDARY



cast send 0x9120763c64653676f467a060A56aD4990Ad51F0A "claimRewards(address,address,address,uint256,bytes32[])" \
$STETH_OPERATOR_ADDRESS \
$NETWORK_ADDRESS \
$DEFAULT_TOKEN_ADDRESS \
2940000000000000000 \
"[0xba10c27d64eb210738f1dedcc4c1bff95d0705e4294e2c0c5cc880a10ee2f9c4]" \
--rpc-url $RPC_URL \
--private-key $STETH_OPERATOR_PRIVATE_KEY

 cast call $DEFAULT_OPERATOR_REWARDS "claimed(address,address,address)" \
  $NETWORK_ADDRESS \
  $DEFAULT_TOKEN_ADDRESS \
 $DEFAULT_OPERATOR_ADDRESS


curl -X POST http://localhost:3000/rewards \
                                                                                        -H "Content-Type: application/json" \
                                                                                        -d '{
    "jsonrpc": "2.0",
    "method": "get_rewards",
    "params": {
    "cluster_id": "'$CLUSTER_ID'",
    "rollup_id": "'$ROLLUP_ID'"
    },
    "id": 1
}'

cast call $STETH_OPERATOR_REWARDS "claimed(address,address,address)" \
$NETWORK_ADDRESS \
$DEFAULT_TOKEN_ADDRESS \
0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC


{"cluster_id":"radius","rollup_id":"rollup_id_2","operator":"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266","rewards":[{"vault":"0x0400b7fcf3e4e02c5585078e3c850b532b65da37","operator_rewards_contract":"0xA33aBBe90AC5167FEBe312B7E95b584ad24D8a9b","tasks":[{"task_id":2,"amount":"1707472309472640105","proof":["0x3ba86b4bec7ad722e160376560c09bf9e25bd82fbf347516c199ab64065de7b1"],"merkle_root":"0x3bffdfef43e9ca2e2b54d010b77b14e3a43cd2d08707c94770446cdcac36f5b7"},{"task_id":1,"amount":"1923966244725738393","proof":["0x79ee47622a384ccd56482e8da6b6e1a3d5a54f825b9dd15dd3abc3894500bd95"],"merkle_root":"0x71fea6716d489f0c73f66b5a16874984e3ad41ac03eed9c52322e184c07019a7"},{"task_id":0,"amount":"1923966244725738393","proof":["0x79ee47622a384ccd56482e8da6b6e1a3d5a54f825b9dd15dd3abc3894500bd95"],"merkle_root":"0x71fea6716d489f0c73f66b5a16874984e3ad41ac03eed9c52322e184c07019a7"}]}]}⏎


cast send 0x0E801D84Fa97b50751Dbf25036d067dCf18858bF "createNewTask(string,string,uint256,bytes32,address[],bytes32[],uint256[],uint256[])" \
  $CLUSTER_ID $ROLLUP_ID 12 \
  0x287b58b93ed6c17ace087bb87f611bf21102c0602b0956736b6e523fb41c328d \
  [0x8615436b4ae383b2320a8545e728db98e05e0c06,0x0400b7fcf3e4e02c5585078e3c850b532b65da37,0x07063bd7599a32bcde28df107f60dc589c27608b] \
  [0xb195b27a4673da7b150fb5fdce1b0b5f0612fddacc96b695adb14fad35de68ff,0x3bffdfef43e9ca2e2b54d010b77b14e3a43cd2d08707c94770446cdcac36f5b7,0x2bf9bdd5188449898d6d5a3c7c6acf44b3f33bd4a1a38dc26c7ea64bbc6c53f6] \
  [1239874359398247,1045462059844602413,1953298065795999338] \
  [2893040171929243,2439411472970738961,4557695486857331785] --rpc-url http://127.0.0.1:8545 --private-key 0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80


  {"cluster_id":"radius","rollup_id":"rollup_id_2","operator":"0x90F79bf6EB2c4f870365E785982E1f101E93b906","rewards":[{"vault":"0x0400b7fcf3e4e02c5585078e3c850b532b65da37","operator_rewards_contract":"0xA33aBBe90AC5167FEBe312B7E95b584ad24D8a9b","tasks":[{"task_id":2,"amount":"731939163498098856","proof":["0xd48c0a2f3ccd42918180c14eedc7ee607f7d42e4d8cc578055bb3f61ce615b31"],"merkle_root":"0x3bffdfef43e9ca2e2b54d010b77b14e3a43cd2d08707c94770446cdcac36f5b7"},{"task_id":1,"amount":"824050632911392404","proof":["0x22e89b80c2e9aa1e57cf700b80849c1cb922447f8274cbaa9d1c029e2f0136b8"],"merkle_root":"0x71fea6716d489f0c73f66b5a16874984e3ad41ac03eed9c52322e184c07019a7"},{"task_id":0,"amount":"824050632911392404","proof":["0x22e89b80c2e9aa1e57cf700b80849c1cb922447f8274cbaa9d1c029e2f0136b8"],"merkle_root":"0x71fea6716d489f0c73f66b5a16874984e3ad41ac03eed9c52322e184c07019a7"}]}]}⏎



  cast send $VALIDATION_SERVICE_MANAGER_CONTRACT_ADDRESS "createNewTask(string,string,uint256,bytes32,address[],bytes32[],uint256[],uint256[])" $CLUSTER_ID $ROLLUP_ID 12 0x287b58b93ed6c17ace087bb87f611bf21102c0602b0956736b6e523fb41c328d [] [] [] [] --rpc-url $RPC_URL --private-key $DEFAULT_OPERATOR_PRIVATE_KEY


  cast send $VALIDATION_SERVICE_MANAGER_CONTRACT_ADDRESS "createNewTask((string,string,uint256,bytes32),(address[],bytes32[],uint256[],uint256[]))" \
  "(\"radius\",\"rollup_id_2\",12,0x287b58b93ed6c17ace087bb87f611bf21102c0602b0956736b6e523fb41c328d)" \
  "([],[],[])" \
  --rpc-url $RPC_URL --private-key $DEFAULT_OPERATOR_PRIVATE_KEY


  cast send $VALIDATION_SERVICE_MANAGER_CONTRACT_ADDRESS \
"createNewTask((string,string,uint256,bytes32),(address[],bytes32[],uint256[],uint256[]))" \
"(\"$CLUSTER_ID\",\"$ROLLUP_ID\",12,0x287b58b93ed6c17ace087bb87f611bf21102c0602b0956736b6e523fb41c328d)" \
"([],[],[],[])" \
--rpc-url $RPC_URL --private-key $WBTC_OPERATOR_PRIVATE_KEY


curl -X POST https://a0f9-59-10-110-198.ngrok-free.app/rewards \
    -H "Content-Type: application/json" \

      -d '{
"jsonrpc": "2.0",
"method": "get_rewards",
"params": {
  "cluster_id": "'$CLUSTER_ID'",
  "rollup_id": "'$ROLLUP_ID'"
},
"id": 1
}'


# curl -X POST http://localhost:3000/rewards \
curl -X POST https://a0f9-59-10-110-198.ngrok-free.app/rewards \
        -H "Content-Type: application/json" \
        -d '{
  "jsonrpc": "2.0",
  "method": "get_rewards",
  "params": {
    "cluster_id": "'$CLUSTER_ID'",
    "rollup_id": "'$ROLLUP_ID'"
  },
  "id": 1
  }'